enum GamePhase {
    WaitingForPlayers
    CountdownToStart
    DeterminingFirstPlayer
    InProgress
    Complete
}

type GameState {
    id: String!
    gameId: String!
    currentTotal: Int!
    phase: GamePhase!
    currentPlayerId: String
    winnerId: String
    fkPlayerOneId: String
    fkPlayerTwoId: String
    playerOne: User
    playerTwo: User
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date
}

input InputMove {
    gameId: String!
    value: Int!
}

input InputCreateGame {
    gameId: String!
}

input InputUpdateGame {
    currentTotal: Int
    currentPlayerId: String
    winnerId: String
    fkPlayerOneId: String
    fkPlayerTwoId: String
}

input InputConnectPlayer {
    gameId: String!
}

fragment GameState on GameState {
    id
    gameId
    currentTotal
    phase
    currentPlayerId
    winnerId
    fkPlayerOneId
    fkPlayerTwoId
    playerOne {
        ...User
    }
    playerTwo {
        ...User
    }
    createdAt
    updatedAt
    deletedAt
}

type Query {
    fetchGameState(id: String!): GameState!
    fetchAllUserGames: [GameState!]!
}

query fetchGameState($id: String!) {
    fetchGameState(id: $id) {
        ...GameState
    }
}

query fetchAllUserGames {
    fetchAllUserGames {
        ...GameState
    }
}

type Mutation {
    createGame(input: InputCreateGame!): GameState!
    sendMove(input: InputMove!): GameState!
    connectPlayer(input: InputConnectPlayer!): GameState!
}

mutation createGame($input: InputCreateGame!) {
    createGame(input: $input) {
        ...GameState
    }
}

mutation sendMove($input: InputMove!) {
    sendMove(input: $input) {
        ...GameState
    }
}

mutation connectPlayer($input: InputConnectPlayer!) {
    connectPlayer(input: $input) {
        ...GameState
    }
}
