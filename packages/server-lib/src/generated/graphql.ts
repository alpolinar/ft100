/**
 * Code generated by `graphql-code-generator`
 *
 * NOTE: THIS IS AN AUTO-GENERATED FILE. DO NOT MODIFY IT DIRECTLY.
 */
/* eslint-disable */

import {
    GraphQLResolveInfo,
    GraphQLScalarType,
    GraphQLScalarTypeConfig,
} from "graphql";
import { gql } from "@apollo/client";
import * as Apollo from "@apollo/client";
export type Maybe<T> = T | undefined | null;
export type InputMaybe<T> = T | undefined | null;
export type Exact<T extends { [key: string]: unknown }> = {
    [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
    T extends { [key: string]: unknown },
    K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
    | T
    | {
          [P in keyof T]?: P extends " $fragmentName" | "__typename"
              ? T[P]
              : never;
      };
export type RequireFields<T, K extends keyof T> = Omit<T, K> & {
    [P in K]-?: NonNullable<T[P]>;
};
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: { input: string; output: string };
    String: { input: string; output: string };
    Boolean: { input: boolean; output: boolean };
    Int: { input: number; output: number };
    Float: { input: number; output: number };
    Date: { input: Date; output: Date };
};

export class GameState {
    readonly currentPlayerId: Scalars["String"]["output"];
    readonly currentTotal: Scalars["Int"]["output"];
    readonly id: Scalars["String"]["output"];
    readonly player1?: Maybe<User>;
    readonly player2?: Maybe<User>;
    readonly winnerId?: Maybe<Scalars["String"]["output"]>;
}

export class InputMove {
    readonly gameId: Scalars["String"]["input"];
    readonly userId: Scalars["String"]["input"];
    readonly value: Scalars["Int"]["input"];
}

export class Move {
    readonly gameId: Scalars["String"]["output"];
    readonly id: Scalars["String"]["output"];
    readonly userId: Scalars["String"]["output"];
    readonly value: Scalars["Int"]["output"];
}

export class Mutation {
    readonly sendMove: GameState;
}

export type MutationSendMoveArgs = {
    input: InputMove;
};

export class Query {
    readonly fetchGameState: GameState;
    readonly healthcheck: Scalars["String"]["output"];
}

export type QueryFetchGameStateArgs = {
    id: Scalars["String"]["input"];
};

export class Subscription {
    readonly listenToGameUpdates: GameState;
}

export type SubscriptionListenToGameUpdatesArgs = {
    channelId: Scalars["String"]["input"];
};

export class User {
    readonly id: Scalars["String"]["output"];
    readonly username?: Maybe<Scalars["String"]["output"]>;
}

export type ResolverTypeWrapper<T> = T;

export type Resolver<
    TResult,
    TParent = {},
    TContext = {},
    TArgs = {},
> = ResolverFn<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
    parent: TParent,
    args: TArgs,
    context: TContext,
    info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
    parent: TParent,
    args: TArgs,
    context: TContext,
    info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
    parent: TParent,
    args: TArgs,
    context: TContext,
    info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<
    TResult,
    TKey extends string,
    TParent,
    TContext,
    TArgs,
> {
    subscribe: SubscriptionSubscribeFn<
        { [key in TKey]: TResult },
        TParent,
        TContext,
        TArgs
    >;
    resolve?: SubscriptionResolveFn<
        TResult,
        { [key in TKey]: TResult },
        TContext,
        TArgs
    >;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<
    TResult,
    TKey extends string,
    TParent,
    TContext,
    TArgs,
> =
    | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
    | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<
    TResult,
    TKey extends string,
    TParent = {},
    TContext = {},
    TArgs = {},
> =
    | ((
          ...args: any[]
      ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
    | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
    parent: TParent,
    context: TContext,
    info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
    obj: T,
    context: TContext,
    info: GraphQLResolveInfo
) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<
    TResult = {},
    TParent = {},
    TContext = {},
    TArgs = {},
> = (
    next: NextResolverFn<TResult>,
    parent: TParent,
    args: TArgs,
    context: TContext,
    info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
    Boolean: ResolverTypeWrapper<Scalars["Boolean"]["output"]>;
    Date: ResolverTypeWrapper<Scalars["Date"]["output"]>;
    GameState: ResolverTypeWrapper<GameState>;
    InputMove: InputMove;
    Int: ResolverTypeWrapper<Scalars["Int"]["output"]>;
    Move: ResolverTypeWrapper<Move>;
    Mutation: ResolverTypeWrapper<{}>;
    Query: ResolverTypeWrapper<{}>;
    String: ResolverTypeWrapper<Scalars["String"]["output"]>;
    Subscription: ResolverTypeWrapper<{}>;
    User: ResolverTypeWrapper<User>;
};

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
    Boolean: Scalars["Boolean"]["output"];
    Date: Scalars["Date"]["output"];
    GameState: GameState;
    InputMove: InputMove;
    Int: Scalars["Int"]["output"];
    Move: Move;
    Mutation: {};
    Query: {};
    String: Scalars["String"]["output"];
    Subscription: {};
    User: User;
};

export interface DateScalarConfig
    extends GraphQLScalarTypeConfig<ResolversTypes["Date"], any> {
    name: "Date";
}

export type GameStateResolvers<
    ContextType = any,
    ParentType extends
        ResolversParentTypes["GameState"] = ResolversParentTypes["GameState"],
> = {
    currentPlayerId?: Resolver<
        ResolversTypes["String"],
        ParentType,
        ContextType
    >;
    currentTotal?: Resolver<ResolversTypes["Int"], ParentType, ContextType>;
    id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
    player1?: Resolver<Maybe<ResolversTypes["User"]>, ParentType, ContextType>;
    player2?: Resolver<Maybe<ResolversTypes["User"]>, ParentType, ContextType>;
    winnerId?: Resolver<
        Maybe<ResolversTypes["String"]>,
        ParentType,
        ContextType
    >;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MoveResolvers<
    ContextType = any,
    ParentType extends
        ResolversParentTypes["Move"] = ResolversParentTypes["Move"],
> = {
    gameId?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
    id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
    userId?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
    value?: Resolver<ResolversTypes["Int"], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type MutationResolvers<
    ContextType = any,
    ParentType extends
        ResolversParentTypes["Mutation"] = ResolversParentTypes["Mutation"],
> = {
    sendMove?: Resolver<
        ResolversTypes["GameState"],
        ParentType,
        ContextType,
        RequireFields<MutationSendMoveArgs, "input">
    >;
};

export type QueryResolvers<
    ContextType = any,
    ParentType extends
        ResolversParentTypes["Query"] = ResolversParentTypes["Query"],
> = {
    fetchGameState?: Resolver<
        ResolversTypes["GameState"],
        ParentType,
        ContextType,
        RequireFields<QueryFetchGameStateArgs, "id">
    >;
    healthcheck?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
};

export type SubscriptionResolvers<
    ContextType = any,
    ParentType extends
        ResolversParentTypes["Subscription"] = ResolversParentTypes["Subscription"],
> = {
    listenToGameUpdates?: SubscriptionResolver<
        ResolversTypes["GameState"],
        "listenToGameUpdates",
        ParentType,
        ContextType,
        RequireFields<SubscriptionListenToGameUpdatesArgs, "channelId">
    >;
};

export type UserResolvers<
    ContextType = any,
    ParentType extends
        ResolversParentTypes["User"] = ResolversParentTypes["User"],
> = {
    id?: Resolver<ResolversTypes["String"], ParentType, ContextType>;
    username?: Resolver<
        Maybe<ResolversTypes["String"]>,
        ParentType,
        ContextType
    >;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
};

export type Resolvers<ContextType = any> = {
    Date?: GraphQLScalarType;
    GameState?: GameStateResolvers<ContextType>;
    Move?: MoveResolvers<ContextType>;
    Mutation?: MutationResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
    Subscription?: SubscriptionResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
};

export type HealthcheckQueryVariables = Exact<{ [key: string]: never }>;

export type HealthcheckQuery = { readonly healthcheck: string };

export type GameStateFragment = {
    readonly id: string;
    readonly currentTotal: number;
    readonly currentPlayerId: string;
    readonly winnerId?: string | undefined | null;
    readonly player1?:
        | { readonly id: string; readonly username?: string | undefined | null }
        | undefined
        | null;
    readonly player2?:
        | { readonly id: string; readonly username?: string | undefined | null }
        | undefined
        | null;
};

export type FetchGameStateQueryVariables = Exact<{
    id: Scalars["String"]["input"];
}>;

export type FetchGameStateQuery = {
    readonly fetchGameState: {
        readonly id: string;
        readonly currentTotal: number;
        readonly currentPlayerId: string;
        readonly winnerId?: string | undefined | null;
        readonly player1?:
            | {
                  readonly id: string;
                  readonly username?: string | undefined | null;
              }
            | undefined
            | null;
        readonly player2?:
            | {
                  readonly id: string;
                  readonly username?: string | undefined | null;
              }
            | undefined
            | null;
    };
};

export type SendMoveMutationVariables = Exact<{
    input: InputMove;
}>;

export type SendMoveMutation = {
    readonly sendMove: {
        readonly id: string;
        readonly currentTotal: number;
        readonly currentPlayerId: string;
        readonly winnerId?: string | undefined | null;
        readonly player1?:
            | {
                  readonly id: string;
                  readonly username?: string | undefined | null;
              }
            | undefined
            | null;
        readonly player2?:
            | {
                  readonly id: string;
                  readonly username?: string | undefined | null;
              }
            | undefined
            | null;
    };
};

export type ListenToGameUpdatesSubscriptionVariables = Exact<{
    channelId: Scalars["String"]["input"];
}>;

export type ListenToGameUpdatesSubscription = {
    readonly listenToGameUpdates: {
        readonly id: string;
        readonly currentTotal: number;
        readonly currentPlayerId: string;
        readonly winnerId?: string | undefined | null;
        readonly player1?:
            | {
                  readonly id: string;
                  readonly username?: string | undefined | null;
              }
            | undefined
            | null;
        readonly player2?:
            | {
                  readonly id: string;
                  readonly username?: string | undefined | null;
              }
            | undefined
            | null;
    };
};

export type UserFragment = {
    readonly id: string;
    readonly username?: string | undefined | null;
};

export const UserFragmentDoc = gql`
    fragment User on User {
  id
  username
}
    `;
export const GameStateFragmentDoc = gql`
    fragment GameState on GameState {
  id
  currentTotal
  currentPlayerId
  winnerId
  player1 {
    ...User
  }
  player2 {
    ...User
  }
}
    ${UserFragmentDoc}`;
export const HealthcheckDocument = gql`
    query healthcheck {
  healthcheck
}
    `;

/**
 * __useHealthcheckQuery__
 *
 * To run a query within a React component, call `useHealthcheckQuery` and pass it any options that fit your needs.
 * When your component renders, `useHealthcheckQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHealthcheckQuery({
 *   variables: {
 *   },
 * });
 */
export function useHealthcheckQuery(
    baseOptions?: Apollo.QueryHookOptions<
        HealthcheckQuery,
        HealthcheckQueryVariables
    >
) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery<HealthcheckQuery, HealthcheckQueryVariables>(
        HealthcheckDocument,
        options
    );
}
export function useHealthcheckLazyQuery(
    baseOptions?: Apollo.LazyQueryHookOptions<
        HealthcheckQuery,
        HealthcheckQueryVariables
    >
) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery<HealthcheckQuery, HealthcheckQueryVariables>(
        HealthcheckDocument,
        options
    );
}
export function useHealthcheckSuspenseQuery(
    baseOptions?:
        | Apollo.SkipToken
        | Apollo.SuspenseQueryHookOptions<
              HealthcheckQuery,
              HealthcheckQueryVariables
          >
) {
    const options =
        baseOptions === Apollo.skipToken
            ? baseOptions
            : { ...defaultOptions, ...baseOptions };
    return Apollo.useSuspenseQuery<HealthcheckQuery, HealthcheckQueryVariables>(
        HealthcheckDocument,
        options
    );
}
export type HealthcheckQueryHookResult = ReturnType<typeof useHealthcheckQuery>;
export type HealthcheckLazyQueryHookResult = ReturnType<
    typeof useHealthcheckLazyQuery
>;
export type HealthcheckSuspenseQueryHookResult = ReturnType<
    typeof useHealthcheckSuspenseQuery
>;
export type HealthcheckQueryResult = Apollo.QueryResult<
    HealthcheckQuery,
    HealthcheckQueryVariables
>;
export const FetchGameStateDocument = gql`
    query fetchGameState($id: String!) {
  fetchGameState(id: $id) {
    ...GameState
  }
}
    ${GameStateFragmentDoc}`;

/**
 * __useFetchGameStateQuery__
 *
 * To run a query within a React component, call `useFetchGameStateQuery` and pass it any options that fit your needs.
 * When your component renders, `useFetchGameStateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFetchGameStateQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useFetchGameStateQuery(
    baseOptions: Apollo.QueryHookOptions<
        FetchGameStateQuery,
        FetchGameStateQueryVariables
    > &
        (
            | { variables: FetchGameStateQueryVariables; skip?: boolean }
            | { skip: boolean }
        )
) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useQuery<FetchGameStateQuery, FetchGameStateQueryVariables>(
        FetchGameStateDocument,
        options
    );
}
export function useFetchGameStateLazyQuery(
    baseOptions?: Apollo.LazyQueryHookOptions<
        FetchGameStateQuery,
        FetchGameStateQueryVariables
    >
) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useLazyQuery<
        FetchGameStateQuery,
        FetchGameStateQueryVariables
    >(FetchGameStateDocument, options);
}
export function useFetchGameStateSuspenseQuery(
    baseOptions?:
        | Apollo.SkipToken
        | Apollo.SuspenseQueryHookOptions<
              FetchGameStateQuery,
              FetchGameStateQueryVariables
          >
) {
    const options =
        baseOptions === Apollo.skipToken
            ? baseOptions
            : { ...defaultOptions, ...baseOptions };
    return Apollo.useSuspenseQuery<
        FetchGameStateQuery,
        FetchGameStateQueryVariables
    >(FetchGameStateDocument, options);
}
export type FetchGameStateQueryHookResult = ReturnType<
    typeof useFetchGameStateQuery
>;
export type FetchGameStateLazyQueryHookResult = ReturnType<
    typeof useFetchGameStateLazyQuery
>;
export type FetchGameStateSuspenseQueryHookResult = ReturnType<
    typeof useFetchGameStateSuspenseQuery
>;
export type FetchGameStateQueryResult = Apollo.QueryResult<
    FetchGameStateQuery,
    FetchGameStateQueryVariables
>;
export const SendMoveDocument = gql`
    mutation sendMove($input: InputMove!) {
  sendMove(input: $input) {
    ...GameState
  }
}
    ${GameStateFragmentDoc}`;
export type SendMoveMutationFn = Apollo.MutationFunction<
    SendMoveMutation,
    SendMoveMutationVariables
>;

/**
 * __useSendMoveMutation__
 *
 * To run a mutation, you first call `useSendMoveMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendMoveMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendMoveMutation, { data, loading, error }] = useSendMoveMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSendMoveMutation(
    baseOptions?: Apollo.MutationHookOptions<
        SendMoveMutation,
        SendMoveMutationVariables
    >
) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useMutation<SendMoveMutation, SendMoveMutationVariables>(
        SendMoveDocument,
        options
    );
}
export type SendMoveMutationHookResult = ReturnType<typeof useSendMoveMutation>;
export type SendMoveMutationResult = Apollo.MutationResult<SendMoveMutation>;
export type SendMoveMutationOptions = Apollo.BaseMutationOptions<
    SendMoveMutation,
    SendMoveMutationVariables
>;
export const ListenToGameUpdatesDocument = gql`
    subscription listenToGameUpdates($channelId: String!) {
  listenToGameUpdates(channelId: $channelId) {
    ...GameState
  }
}
    ${GameStateFragmentDoc}`;

/**
 * __useListenToGameUpdatesSubscription__
 *
 * To run a query within a React component, call `useListenToGameUpdatesSubscription` and pass it any options that fit your needs.
 * When your component renders, `useListenToGameUpdatesSubscription` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useListenToGameUpdatesSubscription({
 *   variables: {
 *      channelId: // value for 'channelId'
 *   },
 * });
 */
export function useListenToGameUpdatesSubscription(
    baseOptions: Apollo.SubscriptionHookOptions<
        ListenToGameUpdatesSubscription,
        ListenToGameUpdatesSubscriptionVariables
    > &
        (
            | {
                  variables: ListenToGameUpdatesSubscriptionVariables;
                  skip?: boolean;
              }
            | { skip: boolean }
        )
) {
    const options = { ...defaultOptions, ...baseOptions };
    return Apollo.useSubscription<
        ListenToGameUpdatesSubscription,
        ListenToGameUpdatesSubscriptionVariables
    >(ListenToGameUpdatesDocument, options);
}
export type ListenToGameUpdatesSubscriptionHookResult = ReturnType<
    typeof useListenToGameUpdatesSubscription
>;
export type ListenToGameUpdatesSubscriptionResult =
    Apollo.SubscriptionResult<ListenToGameUpdatesSubscription>;
